This code is a python scripts that generates python bindings for the main functions of CAMB,
the Code for Anisotropies in the Microwave Background.  See http://camb.info for more details on CAMB.

The python language can let you more flexibly and easily vary the parameters of CAMB, exposed by this code.  You can easily modify which variables are accessible.  For example, if you have modified CAMB to add a new parameter, you can easily add it to pycamb.


Pre-requisites
--------------

1) CAMB.  

This version of pycamb is designed for the January 2010 of CAMB, but unless the code changes significantly 
it will probably continue to work for later versions.  

Please download CAMB and uncompress it to the camb/ folder -- just like the way it is done in extract_camb.sh.

2) Python

This comes pre-installed on most systems these days.  You need a version 2.5 - 2.7 (not version 3 yet).  
If you need a newer version it can be found in most package managers on linux, or built very easily from source.

3) Numerical python (numpy)

This python package can be installed by package managers on linux or easily from source.  
I do not know how old a version will still work with this code, but there's no harm in going for something recent.  
This code was built for 1.8.1.If you update this you will need to rebuild pycamb.

Check Python and numpy are both correctly installed by running

> python
# Some text about the python version will appear.
>>> import numpy

Also check that the installation of numpy has put the utility f2py on your path.  

> which f2py

4) Optional

If you want to plot your results quickly and easily, install the matplotlib python package.


Building
--------
First extract the CAMB source code to camb/

> bash extract_camb.sh

Second, compile and install pycamb.

> python setup.py install --user
or 
> python setup.py install --inplace

Check if the installation has worked correctly using:

> python

>>> import pycamb

If no error messages are reported, pycamb has been built correctly.


Using
-----
To invoke camb, a lot of parameters (omega[b,c,v,n], etc) has to be provided. We collect these parameters
into a PyCamb object.

> from pycamb import PyCamb
> help(PyCamb) # a list of supported parameters with their default value,
               # documentation and corresponding CAMB variable names.
> camb = PyCamb(n_s=0.971)
> camb['WantTensor'] = True
> print camb # a list of supported parameters with their current value.

The functions currently available in the code are:
    
PyCamb.camb             #Get CMB power spectra; returns T,E,B,X
PyCamb.matter_power     #Get P(k); returns k,P(k)
PyCamb.transfers        #Get transfer functions; returns k,T_i(k,z), sigma8(z)
PyCamb.age              #Get age of universe at z=0
PyCamb.angular_diameter #Get angular diameter distance to given redshift

All of them are called in a similar way; 

> python
>>> from pycamb import PyCamb
>>> help(PyCamb)
>>> camb = pycamb.PyCamb(H0=72, n_s=0.95)
>>> T,E,B,X = camb(2000)
>>> k, p = camb.matter_power(z=[159])

NB: CAMB requires redshift parameters to be in order from high to low. PyCamb works around
this requirement. However we can only do at most 500 redshifts; a workaround is possible but
we have not implemented it yet.

Interactive Mode
----------------

You can use this module either interactively or in a script.  If in interactive mode you probably want to 
install matplotlib (pylab) to plot your results.  The ipython module is also very useful for making interactive 
mode easier - it has a pylab mode where mathematical and plotting tools are already imported.

For convenince, in pycamb.compat a few simple functions are implemented, skipping the creation of a PyCamb
object:
    camb
    matter_power
    transfers
    age
    angular_diameter
    
These functions may save you one line in the interactive mode.

To start most simply in interactive mode, run python at the command line and import everything from the module:
> python   #Or ipython
>>> from pylab import *
>>> from pycamb.compat import *
>>> lmax=2000
>>> T,E,B,X = camb(lmax, H0=70., omegab=0.04,omegav=0.6,omegac=0.36)
>>> ell = arange(1,lmax)
>>> loglog(ell,T,label="TT")
>>> loglog(ell,E, label="EE")
>>> legend()
>>> show() #May not be necessary


Scripts
-------

You can put more complex sets of commands in a script ending in .py, e.g. plot.py

from pycamb import PyCamb
import pylab
lmax=2000
ns_values = [0.8,0.9,1.0,1.1]
ell = pylab.arange(1,lmax)
camb = PyCamb(n_s=ns)
for ns in ns_values:
    camb['n_s'] = ns
    T,E,B,X = camb(lmax)
    pylab.semilogx(ell,T,label="%.2f"%ns)
pylab.legend()
pylab.xlabel("$\ell$", fontsize=20)
pylab.ylabel("$\ell (\ell+1) C_\ell / 2\pi \quad [\mu K^2]$", fontsize=20)
pylab.title("Varying Spectral Index $n_s$")
pylab.xlim(1,2000)
pylab.savefig("spectral_index.eps")

Then run with:

> python plot.py


Modifying / Internals
-------------------
We have added the default parameters corresponding to the WMAP9 fiducial model in 1212.5226v3
to the best of our knowledge (not nessearily exactly the same).

Additional CAMB parameters can be added in src/config.py, in PARAMS variable.
Rerun setup.py to enable these parameters.

The main fortran wrapper code is in src/pycamb_main.f90. There are some memory allocation tricks.
PyCamb implemented is in src/core.py. The parameter translation is implemented in params.py; 
the BoundParams class (subclass of numpy.ndarray) is a float64 vector that can store upto 1024
CAMB parameters.

The f90 code src/parameters.f90 is automatically generated by setup.py according to the PARAMS variable
in config.py. The generated function, 
makeParameters fills the CAMB variables with the values passed in from the Real * 8 array.

The errors are handled with PyCambError objects. We check the global_error_flag in the errors module 
after calling CAMB. If it is non-zero, the exception picks up the  errors.global_error_message and is raised
just like any other python exceptions. Memory leak is not highly expected, though we can not guarrentee CAMB
does not introduce any leaks upon setting global_error_flag.

Another source of error is the STOP instruction in CAMB. On GFortran and Intel Fortran, we replace the instruction
with a longjmp trap to convert it to an exception. There can be memory leaks due to unfreed memory blocks, 
as the code was originally expected to abort with no clean up.

Bugs & Issues
-------------
If you get any weird errors in your scripts about indentation, check whether you have mixed tabs 
and spaces somewhere.

There may be memory leaks from CAMB when an exception is raised.


Joe Zuntz
jaz@astro.ox.ac.uk
September 2010

Yu Feng
yfeng1@andrew.cmu.edu
April 2014

